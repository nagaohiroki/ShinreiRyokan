
//listing of all techniques and passes with embedded asm listings 

technique TShader
{
    pass Mesh
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vColor;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vColor       c13      1
            //   vEyePos      c14      1
            //   vFog         c15      1
            //
            
                vs_3_0
                def c16, 0.5, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_position o0
                dcl_color o1
                dcl_fog o2.x
                dcl_texcoord o3
                dcl_texcoord1 o4.xyz
                dcl_texcoord2 o5.xyz
                dcl_texcoord3 o6.xyz
                dcl_texcoord4 o7.xyz
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 r1.x, v1, c12
                max r1.x, r1.x, c12.w
                mul o1, r1.x, c13
                add o5.xyz, c14, -v0
                dp4 r1.x, r0, c7
                mad o2.x, r1.x, c15.y, c15.x
                mov o0.w, r1.x
                dp3 o6.x, v1, c0
                dp3 o6.y, v1, c1
                dp3 o6.z, v1, c2
                dp4 o3.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov o7.xyz, r0
                add r0.x, r1.y, -r0.w
                mul o3.y, r0.x, c16.x
                add r0.x, r1.y, r1.x
                mov o3.w, r1.y
                mul o3.x, r0.x, c16.x
                mov o4.xyz, v1
            
            // approximately 28 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //
            
                preshader
                mov c0.x, c0.w
                mov c1.x, c0.w
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D ShadowTexSamp;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c2       1
            //   SP            c3       1
            //   SBias         c4       1
            //   BloomColor    c5       1
            //   PLightDif     c6       1
            //   PLightPos     c7       1
            //   PLightVec     c8       1
            //   ShadowTexSamp s0       1
            //
            
                ps_3_0
                def c9, 1, 0, 0, 0
                dcl_color v0.xyz
                dcl_texcoord v1
                dcl_texcoord1 v2.xyz
                dcl_texcoord2 v3.xyz
                dcl_texcoord3 v4.xyz
                dcl_texcoord4 v5.xyz
                dcl_2d s0
                mul r0, c9.xxyx, v1.xyxw
                texldp r0, r0, s0
                rcp r0.y, v1.w
                mad r0.y, v1.z, r0.y, -c4.x
                add r0.x, -r0.y, r0.x
                mov r1.x, c9.x
                cmp r0.x, r0.x, r1.x, c4.y
                dp3 r0.y, v3, v3
                rsq r0.y, r0.y
                mad r0.yzw, v3.xxyz, r0.y, c2.xxyz
                nrm r1.xyz, r0.yzww
                nrm r2.xyz, v2
                dp3 r0.y, r2, r1
                max r1.x, r0.y, c9.y
                pow r0.y, r1.x, c3.w
                mul r0.yzw, r0.y, c3.xxyz
                mad r1.xyz, v0, r0.x, r0.yzww
                dp3_sat r0.x, v4, c8
                pow r1.w, r0.x, c3.w
                add r2.xyz, c7, -v5
                dp3 r0.x, r2, r2
                rsq r0.x, r0.x
                mul r2.xyz, r0.x, r2
                mul r0.x, r0.x, c7.w
                dp3_sat r2.w, v4, r2
                dp3 r2.x, r2, c8
                add_sat r2.x, r2.x, -c8.w
                mad r2.yzw, c6.xxyz, r2.w, r1.w
                mul r2.yzw, r0.x, r2
                mad oC0.xyz, r2.yzww, r2.x, r1
                mad r0.xyz, r2.yzww, r2.x, r0.yzww
                mul oC1.xyz, r0, c5
                mov oC0.w, c0.x
                mov oC1.w, c1.x
            
            // approximately 42 instruction slots used (1 texture, 41 arithmetic)
            };
    }
    pass Mesh_Tex
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vColor;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vColor       c13      1
            //   vEyePos      c14      1
            //   vFog         c15      1
            //
            
                vs_3_0
                def c16, 0.5, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_position o0
                dcl_color o1
                dcl_fog o2.x
                dcl_texcoord o3.xy
                dcl_texcoord1 o4
                dcl_texcoord2 o5.xyz
                dcl_texcoord3 o6.xyz
                dcl_texcoord4 o7.xyz
                dcl_texcoord5 o8.xyz
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 r1.x, v2, c12
                max r1.x, r1.x, c12.w
                mul o1, r1.x, c13
                add o6.xyz, c14, -v0
                dp4 r1.x, r0, c7
                mad o2.x, r1.x, c15.y, c15.x
                mov o0.w, r1.x
                dp3 o7.x, v2, c0
                dp3 o7.y, v2, c1
                dp3 o7.z, v2, c2
                dp4 o4.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov o8.xyz, r0
                add r0.x, r1.y, -r0.w
                mul o4.y, r0.x, c16.x
                add r0.x, r1.y, r1.x
                mov o4.w, r1.y
                mul o4.x, r0.x, c16.x
                mov o3.xy, v1
                mov o5.xyz, v2
            
            // approximately 29 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D Samp;
            //   sampler2D ShadowTexSamp;
            //   float4 vColor;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c0       1
            //   vColor        c1       1
            //   SP            c2       1
            //   SBias         c3       1
            //   BloomColor    c4       1
            //   PLightDif     c5       1
            //   PLightPos     c6       1
            //   PLightVec     c7       1
            //   Samp          s0       1
            //   ShadowTexSamp s1       1
            //
            
                ps_3_0
                def c8, 1, 0, 0, 0
                dcl_color v0.xyz
                dcl_texcoord v1.xy
                dcl_texcoord1 v2
                dcl_texcoord2 v3.xyz
                dcl_texcoord3 v4.xyz
                dcl_texcoord4 v5.xyz
                dcl_texcoord5 v6.xyz
                dcl_2d s0
                dcl_2d s1
                mul r0, c8.xxyx, v2.xyxw
                texldp r0, r0, s1
                rcp r0.y, v2.w
                mad r0.y, v2.z, r0.y, -c3.x
                add r0.x, -r0.y, r0.x
                mov r1.x, c8.x
                cmp r0.x, r0.x, r1.x, c3.y
                dp3 r0.y, v4, v4
                rsq r0.y, r0.y
                mad r0.yzw, v4.xxyz, r0.y, c0.xxyz
                nrm r1.xyz, r0.yzww
                nrm r2.xyz, v3
                dp3 r0.y, r2, r1
                max r1.x, r0.y, c8.y
                pow r0.y, r1.x, c2.w
                mul r0.yzw, r0.y, c2.xxyz
                texld r1, v1, s0
                mul r1.xyz, r1, v0
                mul r1.w, r1.w, c1.w
                mad r1.xyz, r1, r0.x, r0.yzww
                dp3_sat r0.x, v5, c7
                pow r2.x, r0.x, c2.w
                add r2.yzw, c6.xxyz, -v6.xxyz
                dp3 r0.x, r2.yzww, r2.yzww
                rsq r0.x, r0.x
                mul r2.yzw, r0.x, r2
                mul r0.x, r0.x, c6.w
                dp3_sat r3.x, v5, r2.yzww
                dp3 r2.y, r2.yzww, c7
                add_sat r2.y, r2.y, -c7.w
                mad r2.xzw, c5.xyyz, r3.x, r2.x
                mul r2.xzw, r0.x, r2
                mad oC0.xyz, r2.xzww, r2.y, r1
                mad r0.xyz, r2.xzww, r2.y, r0.yzww
                mul oC1.xyz, r0, c4
                mov oC0.w, r1.w
                mov oC1.w, r1.w
            
            // approximately 45 instruction slots used (2 texture, 43 arithmetic)
            };
    }
    pass Mesh_AlphaTex
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vColor;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vColor       c13      1
            //   vEyePos      c14      1
            //   vFog         c15      1
            //
            
                vs_3_0
                def c16, 0.5, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_position o0
                dcl_color o1
                dcl_fog o2.x
                dcl_texcoord o3.xy
                dcl_texcoord1 o4
                dcl_texcoord2 o5.xyz
                dcl_texcoord3 o6.xyz
                dcl_texcoord4 o7.xyz
                dcl_texcoord5 o8.xyz
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 r1.x, v2, c12
                max r1.x, r1.x, c12.w
                mul o1, r1.x, c13
                add o6.xyz, c14, -v0
                dp4 r1.x, r0, c7
                mad o2.x, r1.x, c15.y, c15.x
                mov o0.w, r1.x
                dp3 o7.x, v2, c0
                dp3 o7.y, v2, c1
                dp3 o7.z, v2, c2
                dp4 o4.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov o8.xyz, r0
                add r0.x, r1.y, -r0.w
                mul o4.y, r0.x, c16.x
                add r0.x, r1.y, r1.x
                mov o4.w, r1.y
                mul o4.x, r0.x, c16.x
                mov o3.xy, v1
                mov o5.xyz, v2
            
            // approximately 29 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D Samp;
            //   sampler2D ShadowTexSamp;
            //   float4 vColor;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c0       1
            //   vColor        c1       1
            //   SP            c2       1
            //   SBias         c3       1
            //   BloomColor    c4       1
            //   PLightDif     c5       1
            //   PLightPos     c6       1
            //   PLightVec     c7       1
            //   Samp          s0       1
            //   ShadowTexSamp s1       1
            //
            
                ps_3_0
                def c8, 1, 0, 0, 0
                dcl_color v0.xyz
                dcl_texcoord v1.xy
                dcl_texcoord1 v2
                dcl_texcoord2 v3.xyz
                dcl_texcoord3 v4.xyz
                dcl_texcoord4 v5.xyz
                dcl_texcoord5 v6.xyz
                dcl_2d s0
                dcl_2d s1
                mul r0, c8.xxyx, v2.xyxw
                texldp r0, r0, s1
                rcp r0.y, v2.w
                mad r0.y, v2.z, r0.y, -c3.x
                add r0.x, -r0.y, r0.x
                mov r1.x, c8.x
                cmp r0.x, r0.x, r1.x, c3.y
                dp3 r0.y, v4, v4
                rsq r0.y, r0.y
                mad r0.yzw, v4.xxyz, r0.y, c0.xxyz
                nrm r1.xyz, r0.yzww
                nrm r2.xyz, v3
                dp3 r0.y, r2, r1
                max r1.x, r0.y, c8.y
                pow r0.y, r1.x, c2.w
                mul r0.yzw, r0.y, c2.xxyz
                texld r1, v1, s0
                mul r1.xyz, r1, v0
                mul r1.w, r1.w, c1.w
                mad r1.xyz, r1, r0.x, r0.yzww
                dp3_sat r0.x, v5, c7
                pow r2.x, r0.x, c2.w
                add r2.yzw, c6.xxyz, -v6.xxyz
                dp3 r0.x, r2.yzww, r2.yzww
                rsq r0.x, r0.x
                mul r2.yzw, r0.x, r2
                mul r0.x, r0.x, c6.w
                dp3_sat r3.x, v5, r2.yzww
                dp3 r2.y, r2.yzww, c7
                add_sat r2.y, r2.y, -c7.w
                mad r2.xzw, c5.xyyz, r3.x, r2.x
                mul r2.xzw, r0.x, r2
                mad oC0.xyz, r2.xzww, r2.y, r1
                mad r0.xyz, r2.xzww, r2.y, r0.yzww
                mul oC1.xyz, r0, c4
                mov oC0.w, r1.w
                mov oC1.w, r1.w
            
            // approximately 45 instruction slots used (2 texture, 43 arithmetic)
            };
    }
    pass Mesh_Bump
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vEyePos      c13      1
            //   vFog         c14      1
            //
            
                vs_3_0
                def c15, 0.5, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_tangent v3
                dcl_binormal v4
                dcl_position o0
                dcl_fog o1.x
                dcl_texcoord o2.xy
                dcl_texcoord1 o3
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
                dcl_texcoord5 o7.xyz
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                add r1.xyz, c13, -v0
                nrm r2.xyz, r1
                dp3 r1.x, r2, v3
                dp3 r1.y, r2, v4
                dp3 r1.z, r2, v2
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul o5.xyz, r1.w, r1
                dp3 r1.x, c12, v3
                dp3 r1.y, c12, v4
                dp3 r1.z, c12, v2
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul o4.xyz, r1.w, r1
                dp4 r1.x, r0, c7
                mad o1.x, r1.x, c14.y, c14.x
                mov o0.w, r1.x
                dp3 o6.x, v2, c0
                dp3 o6.y, v2, c1
                dp3 o6.z, v2, c2
                dp4 o3.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov o7.xyz, r0
                add r0.x, r1.y, -r0.w
                mul o3.y, r0.x, c15.x
                add r0.x, r1.y, r1.x
                mov o3.w, r1.y
                mul o3.x, r0.x, c15.x
                mov o2.xy, v1
            
            // approximately 40 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   sampler2D NormalSamp;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D Samp;
            //   sampler2D ShadowTexSamp;
            //   float4 vColor;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c0       1
            //   vColor        c1       1
            //   SP            c2       1
            //   SBias         c3       1
            //   BloomColor    c4       1
            //   PLightDif     c5       1
            //   PLightPos     c6       1
            //   PLightVec     c7       1
            //   Samp          s0       1
            //   ShadowTexSamp s1       1
            //   NormalSamp    s2       1
            //
            
                ps_3_0
                def c8, 2, -1, 1, 0
                dcl_texcoord v0.xy
                dcl_texcoord1 v1
                dcl_texcoord2 v2.xyz
                dcl_texcoord3 v3.xyz
                dcl_texcoord4 v4.xyz
                dcl_texcoord5 v5.xyz
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                mul r0, c8.zzwz, v1.xyxw
                texldp r0, r0, s1
                rcp r0.y, v1.w
                mad r0.y, v1.z, r0.y, -c3.x
                add r0.x, -r0.y, r0.x
                mov r0.z, c8.z
                cmp r0.x, r0.x, r0.z, c3.y
                mov r1.xyz, v2
                add r0.yzw, r1.xxyz, v3.xxyz
                nrm r1.xyz, r0.yzww
                texld r2, v0, s2
                mad r0.yzw, r2.xxyz, c8.x, c8.y
                dp3 r1.x, r0.yzww, r1
                dp3 r0.y, r0.yzww, v2
                max r1.y, c0.w, r0.y
                mul r0.yzw, r1.y, c1.xxyz
                max r2.x, r1.x, c8.w
                pow r1.x, r2.x, c2.w
                mul r1.xyz, r1.x, c2
                texld r2, v0, s0
                mul r0.yzw, r0, r2.xxyz
                mul r1.w, r2.w, c1.w
                mad r0.xyz, r0.yzww, r0.x, r1
                dp3_sat r0.w, v4, c7
                pow r2.x, r0.w, c2.w
                add r2.yzw, c6.xxyz, -v5.xxyz
                dp3 r0.w, r2.yzww, r2.yzww
                rsq r0.w, r0.w
                mul r2.yzw, r0.w, r2
                mul r0.w, r0.w, c6.w
                dp3_sat r3.x, v4, r2.yzww
                dp3 r2.y, r2.yzww, c7
                add_sat r2.y, r2.y, -c7.w
                mad r2.xzw, c5.xyyz, r3.x, r2.x
                mul r2.xzw, r0.w, r2
                mad oC0.xyz, r2.xzww, r2.y, r0
                mad r0.xyz, r2.xzww, r2.y, r1
                mul oC1.xyz, r0, c4
                mov oC0.w, r1.w
                mov oC1.w, r1.w
            
            // approximately 46 instruction slots used (3 texture, 43 arithmetic)
            };
    }
    pass ShadowMap
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mLight       c4       4
            //
            
                vs_3_0
                def c8, 0, 0, 0, 0
                dcl_position v0
                dcl_position o0
                dcl_texcoord o1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 r1.z, r0, c6
                dp4 r1.w, r0, c7
                mov o0.zw, r1
                mov o1.xy, r1.zwzw
                mov o1.zw, c8.x
            
            // approximately 11 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                ps_3_0
                dcl_texcoord v0.xy
                rcp r0.x, v0.y
                mul oC0, r0.x, v0.x
            
            // approximately 2 instruction slots used
            };
    }
    pass ShadowAlphaMap
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mLight       c4       4
            //
            
                vs_3_0
                def c8, 0, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_texcoord o1.xy
                dcl_texcoord1 o2
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 r1.z, r0, c6
                dp4 r1.w, r0, c7
                mov o0.zw, r1
                mov o2.xy, r1.zwzw
                mov o1.xy, v1
                mov o2.zw, c8.x
            
            // approximately 12 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   Samp         s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy
                dcl_texcoord1 v1.xy
                dcl_2d s0
                rcp r0.x, v1.y
                mul oC0.xyz, r0.x, v1.x
                texld r0, v0, s0
                mov oC0.w, r0.w
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
    pass FVF
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vFog;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   vFog         c8       1
            //
            
                vs_3_0
                dcl_position v0
                dcl_position o0
                dcl_fog o1.x
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 r0.x, r0, c7
                mad o1.x, r0.x, c8.y, c8.x
                mov o0.w, r0.x
            
            // approximately 10 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //
            
                preshader
                mov c0, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                ps_3_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass FVF_Tex
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vFog;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   vFog         c8       1
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_fog o1.x
                dcl_texcoord o2.xy
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 r0.x, r0, c7
                mad o1.x, r0.x, c8.y, c8.x
                mov o0.w, r0.x
                mov o2.xy, v1
            
            // approximately 11 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //   Samp         s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy
                dcl_2d s0
                texld r0, v0, s0
                mul oC0, r0, c0
            
            // approximately 2 instruction slots used (1 texture, 1 arithmetic)
            };
    }
    pass FVF_Tex_Point
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vFog;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   vFog         c8       1
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_fog o1.x
                dcl_texcoord o2.xy
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 r0.x, r0, c7
                mad o1.x, r0.x, c8.y, c8.x
                mov o0.w, r0.x
                mov o2.xy, v1
            
            // approximately 11 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //   Samp         s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy
                dcl_2d s0
                texld r0, v0, s0
                mul oC0, r0, c0
            
            // approximately 2 instruction slots used (1 texture, 1 arithmetic)
            };
    }
    pass FVF_Tex_One
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_texcoord o1.xy
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 o0.w, r0, c7
                mov o1.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   sampler2D Samp;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //   BloomColor   c1       1
            //   Samp         s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy
                dcl_2d s0
                texld r0, v0, s0
                mul r0, r0, c0
                mul oC1, r0, c1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
    pass Tone
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_texcoord o1.xy
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 o0.w, r0, c7
                mov o1.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 PixelUV;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   PixelUV      c0       1
            //
            
                preshader
                rcp r0.x, c0.x
                mul c0.x, r0.x, c0.z
                mul r0.x, c0.y, c0.y
                mul r1.x, r0.x, r0.x
                rcp c1.x, r1.x
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   Samp         s0       1
            //
            
                ps_3_0
                def c2, 1, 0, 0, 0
                dcl_texcoord v0.xy
                dcl_2d s0
                texld r0, v0, s0
                max r1.x, r0.y, r0.z
                max r2.x, r0.x, r1.x
                mul r1.x, r2.x, c0.x
                mov r3.x, c0.x
                mad r1.y, r3.x, r2.x, c2.x
                rcp r1.y, r1.y
                mov r2.x, c2.x
                mad r1.z, r1.x, c1.x, r2.x
                mul r1.x, r1.z, r1.x
                mul r1.x, r1.y, r1.x
                mul oC0.xyz, r0, r1.x
                mov oC0.w, r0.w
            
            // approximately 13 instruction slots used (1 texture, 12 arithmetic)
            };
    }
    pass GaussX
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_texcoord o1.xy
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 o0.w, r0, c7
                mov o1.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   GaussMap     c0       1
            //
            
                preshader
                add c6.x, c0.x, c0.x
                add c6.y, c0.z, c0.z
                mul c7.x, c0.x, (3)
                mul c7.y, c0.z, (3)
                mul c8.x, c0.x, (4)
                mul c8.y, c0.z, (4)
                mul c9.x, c0.x, (5)
                mul c9.y, c0.z, (5)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //   sampler2D Samp;
            //   float w[6];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   w            c0       6
            //   GaussMap     c10      1
            //   Samp         s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy
                dcl_2d s0
                add r0.xy, -c10.xzzw, v0
                texld r0, r0, s0
                mul r0, r0, c1.x
                texld r1, v0, s0
                mad r0, r1, c0.x, r0
                add r1.xy, -c6, v0
                texld r1, r1, s0
                mad r0, r1, c2.x, r0
                add r1.xy, -c7, v0
                texld r1, r1, s0
                mad r0, r1, c3.x, r0
                add r1.xy, -c8, v0
                texld r1, r1, s0
                mad r0, r1, c4.x, r0
                add r1.xy, -c9, v0
                texld r1, r1, s0
                mad r0, r1, c5.x, r0
                add r1.xy, c10.xzzw, v0
                texld r1, r1, s0
                mad r0, r1, c1.x, r0
                add r1.xy, c6, v0
                texld r1, r1, s0
                mad r0, r1, c2.x, r0
                add r1.xy, c7, v0
                texld r1, r1, s0
                mad r0, r1, c3.x, r0
                add r1.xy, c8, v0
                texld r1, r1, s0
                mad r0, r1, c4.x, r0
                add r1.xy, c9, v0
                texld r1, r1, s0
                mad oC0, r1, c5.x, r0
            
            // approximately 32 instruction slots used (11 texture, 21 arithmetic)
            };
    }
    pass GaussY
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_position o0
                dcl_texcoord o1.xy
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 o0.x, r0, c4
                dp4 o0.y, r0, c5
                dp4 o0.z, r0, c6
                dp4 o0.w, r0, c7
                mov o1.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   GaussMap     c0       1
            //
            
                preshader
                add c6.x, c0.z, c0.z
                add c6.y, c0.y, c0.y
                mul c7.x, c0.z, (3)
                mul c7.y, c0.y, (3)
                mul c8.x, c0.z, (4)
                mul c8.y, c0.y, (4)
                mul c9.x, c0.z, (5)
                mul c9.y, c0.y, (5)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //   sampler2D Samp;
            //   float w[6];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   w            c0       6
            //   GaussMap     c10      1
            //   Samp         s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy
                dcl_2d s0
                add r0.xy, -c10.zyzw, v0
                texld r0, r0, s0
                mul r0, r0, c1.x
                texld r1, v0, s0
                mad r0, r1, c0.x, r0
                add r1.xy, -c6, v0
                texld r1, r1, s0
                mad r0, r1, c2.x, r0
                add r1.xy, -c7, v0
                texld r1, r1, s0
                mad r0, r1, c3.x, r0
                add r1.xy, -c8, v0
                texld r1, r1, s0
                mad r0, r1, c4.x, r0
                add r1.xy, -c9, v0
                texld r1, r1, s0
                mad r0, r1, c5.x, r0
                add r1.xy, c10.zyzw, v0
                texld r1, r1, s0
                mad r0, r1, c1.x, r0
                add r1.xy, c6, v0
                texld r1, r1, s0
                mad r0, r1, c2.x, r0
                add r1.xy, c7, v0
                texld r1, r1, s0
                mad r0, r1, c3.x, r0
                add r1.xy, c8, v0
                texld r1, r1, s0
                mad r0, r1, c4.x, r0
                add r1.xy, c9, v0
                texld r1, r1, s0
                mad oC0, r1, c5.x, r0
            
            // approximately 32 instruction slots used (11 texture, 21 arithmetic)
            };
    }
}

