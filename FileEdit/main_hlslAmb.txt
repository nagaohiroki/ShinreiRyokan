
//listing of all techniques and passes with embedded asm listings 

technique TShader
{
    pass Mesh
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vColor;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vColor       c13      1
            //   vEyePos      c14      1
            //   vFog         c15      1
            //
            
                vs_1_1
                def c16, 0.5, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 r1.x, v1, c12
                max r1.x, r1.x, c12.w
                mul oD0, r1.x, c13
                add oT2.xyz, -v0, c14
                dp4 r1.x, r0, c7
                mad oFog, r1.x, c15.y, c15.x
                mov oPos.w, r1.x
                dp3 oT3.x, v1, c0
                dp3 oT3.y, v1, c1
                dp3 oT3.z, v1, c2
                dp4 oT0.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov oT4.xyz, r0
                add r0.x, r1.y, -r0.w
                mul oT0.y, r0.x, c16.x
                add r0.x, r1.y, r1.x
                mov oT0.w, r1.y
                mul oT0.x, r0.x, c16.x
                mov oT1.xyz, v1
            
            // approximately 28 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //
            
                preshader
                mov c0.x, c0.w
                mov c1.x, c0.w
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D ShadowTexSamp;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c2       1
            //   SP            c3       1
            //   SBias         c4       1
            //   BloomColor    c5       1
            //   PLightDif     c6       1
            //   PLightPos     c7       1
            //   PLightVec     c8       1
            //   ShadowTexSamp s0       1
            //
            
                ps_2_0
                def c9, 0, 1, 0, 0
                dcl v0.xyz
                dcl t0
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl_2d s0
                mov r0.xyw, t0
                mov r0.z, c9.x
                texldp r0, r0, s0
                rcp r0.y, t0.w
                mad r0.y, t0.z, r0.y, -c4.x
                add r0.x, -r0.y, r0.x
                mov r0.y, c9.y
                cmp r0.x, r0.x, r0.y, c4.y
                dp3 r0.y, t2, t2
                rsq r0.y, r0.y
                mad r1.xyz, t2, r0.y, c2
                nrm r2.xyz, r1
                nrm r1.xyz, t1
                dp3 r0.y, r1, r2
                max r1.x, r0.y, c9.x
                pow r0.y, r1.x, c3.w
                mul r0.yzw, r0.y, c3.wzyx
                mad r1.xyz, v0, r0.x, r0.wzyx
                dp3_sat r1.w, t3, c8
                pow r0.x, r1.w, c3.w
                add r2.xyz, -t4, c7
                dp3 r1.w, r2, r2
                rsq r1.w, r1.w
                mul r2.xyz, r1.w, r2
                mul r1.w, r1.w, c7.w
                dp3_sat r2.w, t3, r2
                dp3 r2.x, r2, c8
                add_sat r2.x, r2.x, -c8.w
                mad r2.yzw, c6.wzyx, r2.w, r0.x
                mul r2.yzw, r1.w, r2
                mad r1.xyz, r2.wzyx, r2.x, r1
                mad r0.xyz, r2.wzyx, r2.x, r0.wzyx
                mul r0.xyz, r0, c5
                mov r1.w, c0.x
                mov oC0, r1
                mov r0.w, c1.x
                mov oC1, r0
            
            // approximately 45 instruction slots used (1 texture, 44 arithmetic)
            };
    }
    pass Mesh_Tex
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vColor;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vColor       c13      1
            //   vEyePos      c14      1
            //   vFog         c15      1
            //
            
                vs_1_1
                def c16, 0.5, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 r1.x, v2, c12
                max r1.x, r1.x, c12.w
                mul oD0, r1.x, c13
                add oT3.xyz, -v0, c14
                dp4 r1.x, r0, c7
                mad oFog, r1.x, c15.y, c15.x
                mov oPos.w, r1.x
                dp3 oT4.x, v2, c0
                dp3 oT4.y, v2, c1
                dp3 oT4.z, v2, c2
                dp4 oT1.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov oT5.xyz, r0
                add r0.x, r1.y, -r0.w
                mul oT1.y, r0.x, c16.x
                add r0.x, r1.y, r1.x
                mov oT1.w, r1.y
                mul oT1.x, r0.x, c16.x
                mov oT0.xy, v1
                mov oT2.xyz, v2
            
            // approximately 29 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D Samp;
            //   sampler2D ShadowTexSamp;
            //   float4 vColor;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c0       1
            //   vColor        c1       1
            //   SP            c2       1
            //   SBias         c3       1
            //   BloomColor    c4       1
            //   PLightDif     c5       1
            //   PLightPos     c6       1
            //   PLightVec     c7       1
            //   Samp          s0       1
            //   ShadowTexSamp s1       1
            //
            
                ps_2_0
                def c8, 0, 1, 0, 0
                dcl v0.xyz
                dcl t0.xy
                dcl t1
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mov r1.xyw, t1
                mov r1.z, c8.x
                texldp r1, r1, s1
                rcp r1.y, t1.w
                mad r1.y, t1.z, r1.y, -c3.x
                add r1.x, -r1.y, r1.x
                mov r1.y, c8.y
                cmp r1.x, r1.x, r1.y, c3.y
                dp3 r1.y, t3, t3
                rsq r1.y, r1.y
                mad r2.xyz, t3, r1.y, c0
                nrm r3.xyz, r2
                nrm r2.xyz, t2
                dp3 r1.y, r2, r3
                max r2.x, r1.y, c8.x
                pow r1.y, r2.x, c2.w
                mul r1.yzw, r1.y, c2.wzyx
                mul r0.xyz, r0, v0
                mul r2.w, r0.w, c1.w
                mad r0.xyz, r0, r1.x, r1.wzyx
                dp3_sat r0.w, t4, c7
                pow r1.x, r0.w, c2.w
                add r3.xyz, -t5, c6
                dp3 r0.w, r3, r3
                rsq r0.w, r0.w
                mul r3.xyz, r0.w, r3
                mul r0.w, r0.w, c6.w
                dp3_sat r3.w, t4, r3
                dp3 r3.x, r3, c7
                add_sat r3.x, r3.x, -c7.w
                mad r3.yzw, c5.wzyx, r3.w, r1.x
                mul r3.yzw, r0.w, r3
                mad r2.xyz, r3.wzyx, r3.x, r0
                mad r0.xyz, r3.wzyx, r3.x, r1.wzyx
                mul r0.xyz, r0, c4
                mov oC0, r2
                mov r0.w, r2.w
                mov oC1, r0
            
            // approximately 47 instruction slots used (2 texture, 45 arithmetic)
            };
    }
    pass Mesh_AlphaTex
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vColor;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vColor       c13      1
            //   vEyePos      c14      1
            //   vFog         c15      1
            //
            
                vs_1_1
                def c16, 0.5, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 r1.x, v2, c12
                max r1.x, r1.x, c12.w
                mul oD0, r1.x, c13
                add oT3.xyz, -v0, c14
                dp4 r1.x, r0, c7
                mad oFog, r1.x, c15.y, c15.x
                mov oPos.w, r1.x
                dp3 oT4.x, v2, c0
                dp3 oT4.y, v2, c1
                dp3 oT4.z, v2, c2
                dp4 oT1.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov oT5.xyz, r0
                add r0.x, r1.y, -r0.w
                mul oT1.y, r0.x, c16.x
                add r0.x, r1.y, r1.x
                mov oT1.w, r1.y
                mul oT1.x, r0.x, c16.x
                mov oT0.xy, v1
                mov oT2.xyz, v2
            
            // approximately 29 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D Samp;
            //   sampler2D ShadowTexSamp;
            //   float4 vColor;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c0       1
            //   vColor        c1       1
            //   SP            c2       1
            //   SBias         c3       1
            //   BloomColor    c4       1
            //   PLightDif     c5       1
            //   PLightPos     c6       1
            //   PLightVec     c7       1
            //   Samp          s0       1
            //   ShadowTexSamp s1       1
            //
            
                ps_2_0
                def c8, 0, 1, 0, 0
                dcl v0.xyz
                dcl t0.xy
                dcl t1
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mov r1.xyw, t1
                mov r1.z, c8.x
                texldp r1, r1, s1
                rcp r1.y, t1.w
                mad r1.y, t1.z, r1.y, -c3.x
                add r1.x, -r1.y, r1.x
                mov r1.y, c8.y
                cmp r1.x, r1.x, r1.y, c3.y
                dp3 r1.y, t3, t3
                rsq r1.y, r1.y
                mad r2.xyz, t3, r1.y, c0
                nrm r3.xyz, r2
                nrm r2.xyz, t2
                dp3 r1.y, r2, r3
                max r2.x, r1.y, c8.x
                pow r1.y, r2.x, c2.w
                mul r1.yzw, r1.y, c2.wzyx
                mul r0.xyz, r0, v0
                mul r2.w, r0.w, c1.w
                mad r0.xyz, r0, r1.x, r1.wzyx
                dp3_sat r0.w, t4, c7
                pow r1.x, r0.w, c2.w
                add r3.xyz, -t5, c6
                dp3 r0.w, r3, r3
                rsq r0.w, r0.w
                mul r3.xyz, r0.w, r3
                mul r0.w, r0.w, c6.w
                dp3_sat r3.w, t4, r3
                dp3 r3.x, r3, c7
                add_sat r3.x, r3.x, -c7.w
                mad r3.yzw, c5.wzyx, r3.w, r1.x
                mul r3.yzw, r0.w, r3
                mad r2.xyz, r3.wzyx, r3.x, r0
                mad r0.xyz, r3.wzyx, r3.x, r1.wzyx
                mul r0.xyz, r0, c4
                mov oC0, r2
                mov r0.w, r2.w
                mov oC1, r0
            
            // approximately 47 instruction slots used (2 texture, 45 arithmetic)
            };
    }
    pass Mesh_Bump
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float3 vEyePos;
            //   float4 vFog;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   mLight       c8       4
            //   vLightDir    c12      1
            //   vEyePos      c13      1
            //   vFog         c14      1
            //
            
                vs_1_1
                def c15, 0.5, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_tangent v3
                dcl_binormal v4
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                add r1.xyz, -v0, c13
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1
                dp3 r2.x, r1, v3
                dp3 r2.y, r1, v4
                dp3 r2.z, r1, v2
                dp3 r1.x, r2, r2
                rsq r1.x, r1.x
                mul oT3.xyz, r1.x, r2
                dp3 r1.x, c12, v3
                dp3 r1.y, c12, v4
                dp3 r1.z, c12, v2
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul oT2.xyz, r1.w, r1
                dp4 r1.x, r0, c7
                mad oFog, r1.x, c14.y, c14.x
                mov oPos.w, r1.x
                dp3 oT4.x, v2, c0
                dp3 oT4.y, v2, c1
                dp3 oT4.z, v2, c2
                dp4 oT1.z, r0, c10
                dp4 r1.x, r0, c8
                dp4 r1.y, r0, c11
                dp4 r0.w, r0, c9
                mov oT5.xyz, r0
                add r0.x, r1.y, -r0.w
                mul oT1.y, r0.x, c15.x
                add r0.x, r1.y, r1.x
                mov oT1.w, r1.y
                mul oT1.x, r0.x, c15.x
                mov oT0.xy, v1
            
            // approximately 40 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   sampler2D NormalSamp;
            //   float4 PLightDif;
            //   float4 PLightPos;
            //   float4 PLightVec;
            //   float4 SBias;
            //   float4 SP;
            //   sampler2D Samp;
            //   sampler2D ShadowTexSamp;
            //   float4 vColor;
            //   float4 vLightDir;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   vLightDir     c0       1
            //   vColor        c1       1
            //   SP            c2       1
            //   SBias         c3       1
            //   BloomColor    c4       1
            //   PLightDif     c5       1
            //   PLightPos     c6       1
            //   PLightVec     c7       1
            //   Samp          s0       1
            //   ShadowTexSamp s1       1
            //   NormalSamp    s2       1
            //
            
                ps_2_0
                def c8, 2, -1, 0, 1
                dcl t0.xy
                dcl t1
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                texld r0, t0, s2
                texld r1, t0, s0
                mov r2.xyw, t1
                mov r2.z, c8.z
                texldp r2, r2, s1
                rcp r0.w, t1.w
                mad r0.w, t1.z, r0.w, -c3.x
                add r0.w, -r0.w, r2.x
                mov r2.w, c8.w
                cmp r0.w, r0.w, r2.w, c3.y
                mov r2.xyz, t2
                add r2.xyz, r2, t3
                nrm r3.xyz, r2
                mad r0.xyz, r0, c8.x, c8.y
                dp3 r2.x, r0, r3
                dp3 r0.x, r0, t2
                max r2.y, c0.w, r0.x
                mul r0.xyz, r2.y, c1
                max r3.x, r2.x, c8.z
                pow r2.x, r3.x, c2.w
                mul r2.xyz, r2.x, c2
                mul r0.xyz, r1, r0
                mul r1.w, r1.w, c1.w
                mad r0.xyz, r0, r0.w, r2
                dp3_sat r0.w, t4, c7
                pow r2.w, r0.w, c2.w
                add r3.xyz, -t5, c6
                dp3 r0.w, r3, r3
                rsq r0.w, r0.w
                mul r3.xyz, r0.w, r3
                mul r0.w, r0.w, c6.w
                dp3_sat r3.w, t4, r3
                dp3 r3.x, r3, c7
                add_sat r3.x, r3.x, -c7.w
                mad r3.yzw, c5.wzyx, r3.w, r2.w
                mul r3.yzw, r0.w, r3
                mad r1.xyz, r3.wzyx, r3.x, r0
                mad r0.xyz, r3.wzyx, r3.x, r2
                mul r0.xyz, r0, c4
                mov oC0, r1
                mov r0.w, r1.w
                mov oC1, r0
            
            // approximately 48 instruction slots used (3 texture, 45 arithmetic)
            };
    }
    pass ShadowMap
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mLight       c4       4
            //
            
                vs_1_1
                def c8, 0, 0, 0, 0
                dcl_position v0
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 r1.z, r0, c6
                dp4 r1.w, r0, c7
                mov oPos.zw, r1
                mov oT0.xy, r1.zwzw
                mov oT0.zw, c8.x
            
            // approximately 11 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                ps_2_0
                dcl t0.xy
                rcp r0.w, t0.y
                mul r0, r0.w, t0.x
                mov oC0, r0
            
            // approximately 3 instruction slots used
            };
    }
    pass ShadowAlphaMap
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mLight;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mLight       c4       4
            //
            
                vs_1_1
                def c8, 0, 0, 0, 0
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 r1.z, r0, c6
                dp4 r1.w, r0, c7
                mov oPos.zw, r1
                mov oT1.xy, r1.zwzw
                mov oT0.xy, v1
                mov oT1.zw, c8.x
            
            // approximately 12 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   Samp         s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl t1.xy
                dcl_2d s0
                texld r0, t0, s0
                rcp r1.w, t1.y
                mul r0.xyz, r1.w, t1.x
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
    pass FVF
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vFog;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   vFog         c8       1
            //
            
                vs_1_1
                dcl_position v0
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 r0.x, r0, c7
                mad oFog, r0.x, c8.y, c8.x
                mov oPos.w, r0.x
            
            // approximately 10 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //
            
                preshader
                mov c0, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass FVF_Tex
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vFog;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   vFog         c8       1
            //
            
                vs_1_1
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 r0.x, r0, c7
                mad oFog, r0.x, c8.y, c8.x
                mov oPos.w, r0.x
                mov oT0.xy, v1
            
            // approximately 11 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //   Samp         s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r1, r0, c0
                mov oC0, r1
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
    pass FVF_Tex_Point
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //   float4 vFog;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //   vFog         c8       1
            //
            
                vs_1_1
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 r0.x, r0, c7
                mad oFog, r0.x, c8.y, c8.x
                mov oPos.w, r0.x
                mov oT0.xy, v1
            
            // approximately 11 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //   Samp         s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r1, r0, c0
                mov oC0, r1
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
    pass FVF_Tex_One
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_1_1
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT0.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 BloomColor;
            //   sampler2D Samp;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   vColor       c0       1
            //   BloomColor   c1       1
            //   Samp         s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r1, r0, c0
                mov oC0, r1
                mul r0, r1, c1
                mov oC1, r0
            
            // approximately 5 instruction slots used (1 texture, 4 arithmetic)
            };
    }
    pass Tone
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_1_1
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT0.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 PixelUV;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   PixelUV      c0       1
            //
            
                preshader
                rcp r0.x, c0.x
                mul c0.x, r0.x, c0.z
                mul r0.x, c0.y, c0.y
                mul r1.x, r0.x, r0.x
                rcp c1.x, r1.x
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D Samp;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   Samp         s0       1
            //
            
                ps_2_0
                def c2, 1, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                mul r1.x, r2.w, c0.x
                mov r2.x, c0.x
                mad r1.y, r2.x, r2.w, c2.x
                rcp r1.y, r1.y
                mov r2.x, c2.x
                mad r1.z, r1.x, c1.x, r2.x
                mul r1.x, r1.z, r1.x
                mul r1.x, r1.y, r1.x
                mul r0.xyz, r0, r1.x
                mov oC0, r0
            
            // approximately 13 instruction slots used (1 texture, 12 arithmetic)
            };
    }
    pass GaussX
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_1_1
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT0.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   GaussMap     c0       1
            //
            
                preshader
                add c6.x, c0.x, c0.x
                add c6.y, c0.z, c0.z
                mul c7.x, c0.x, (3)
                mul c7.y, c0.z, (3)
                mul c8.x, c0.x, (4)
                mul c8.y, c0.z, (4)
                mul c9.x, c0.x, (5)
                mul c9.y, c0.z, (5)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //   sampler2D Samp;
            //   float w[6];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   w            c0       6
            //   GaussMap     c10      1
            //   Samp         s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.x, t0.x, -c10.x
                add r1.y, t0.y, -c10.z
                add r2.xy, t0, -c6
                add r3.xy, t0, -c7
                add r4.xy, t0, -c8
                add r5.xy, t0, -c9
                add r6.x, t0.x, c10.x
                add r6.y, t0.y, c10.z
                add r7.xy, t0, c6
                add r8.xy, t0, c7
                add r9.xy, t0, c8
                add r10.xy, t0, c9
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mul r1, r1, c1.x
                mad r0, r0, c0.x, r1
                mad r0, r2, c2.x, r0
                mad r0, r3, c3.x, r0
                mad r0, r4, c4.x, r0
                mad r0, r5, c5.x, r0
                mad r0, r6, c1.x, r0
                mad r0, r7, c2.x, r0
                mad r0, r8, c3.x, r0
                mad r0, r9, c4.x, r0
                mad r0, r10, c5.x, r0
                mov oC0, r0
            
            // approximately 35 instruction slots used (11 texture, 24 arithmetic)
            };
    }
    pass GaussY
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mVP;
            //   float4x4 mW;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mW           c0       4
            //   mVP          c4       4
            //
            
                vs_1_1
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT0.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   GaussMap     c0       1
            //
            
                preshader
                add c6.x, c0.z, c0.z
                add c6.y, c0.y, c0.y
                mul c7.x, c0.z, (3)
                mul c7.y, c0.y, (3)
                mul c8.x, c0.z, (4)
                mul c8.y, c0.y, (4)
                mul c9.x, c0.z, (5)
                mul c9.y, c0.y, (5)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4 GaussMap;
            //   sampler2D Samp;
            //   float w[6];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   w            c0       6
            //   GaussMap     c10      1
            //   Samp         s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.x, t0.x, -c10.z
                add r1.y, t0.y, -c10.y
                add r2.xy, t0, -c6
                add r3.xy, t0, -c7
                add r4.xy, t0, -c8
                add r5.xy, t0, -c9
                add r6.x, t0.x, c10.z
                add r6.y, t0.y, c10.y
                add r7.xy, t0, c6
                add r8.xy, t0, c7
                add r9.xy, t0, c8
                add r10.xy, t0, c9
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mul r1, r1, c1.x
                mad r0, r0, c0.x, r1
                mad r0, r2, c2.x, r0
                mad r0, r3, c3.x, r0
                mad r0, r4, c4.x, r0
                mad r0, r5, c5.x, r0
                mad r0, r6, c1.x, r0
                mad r0, r7, c2.x, r0
                mad r0, r8, c3.x, r0
                mad r0, r9, c4.x, r0
                mad r0, r10, c5.x, r0
                mov oC0, r0
            
            // approximately 35 instruction slots used (11 texture, 24 arithmetic)
            };
    }
}

